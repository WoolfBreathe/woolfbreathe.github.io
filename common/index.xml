<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Commons on WoolfBreathe</title>
    <link>/common/</link>
    <description>Recent content in Commons on WoolfBreathe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>youremail@domain.com (WoolfBreathe)</managingEditor>
    <webMaster>youremail@domain.com (WoolfBreathe)</webMaster>
    <lastBuildDate>Mon, 22 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/common/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Xpath高级用法</title>
      <link>/common/common-xpath/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (WoolfBreathe)</author>
      <guid>/common/common-xpath/</guid>
      <description>试验环境 Python lxml.etree
试验所使用的html代码 &amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;xpath test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div price=&amp;#34;99.8&amp;#34;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;时间&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;地点&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;任务&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&amp;#39;testid&amp;#39; data-h=&amp;#34;first&amp;#34;&amp;gt;&amp;lt;h2&amp;gt;这里是个小标题&amp;lt;/h2&amp;gt;&amp;lt;ol&amp;gt;&amp;lt;li data=&amp;#34;one&amp;#34;&amp;gt;1&amp;lt;/li&amp;gt;&amp;lt;li data=&amp;#34;two&amp;#34;&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;li data=&amp;#34;three&amp;#34;&amp;gt;3&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li code=&amp;#34;84&amp;#34;&amp;gt;84&amp;lt;/li&amp;gt;&amp;lt;li code=&amp;#34;104&amp;#34;&amp;gt;104&amp;lt;/li&amp;gt;&amp;lt;li code=&amp;#34;223&amp;#34;&amp;gt;223&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;这里是H3的内容&amp;lt;a href=&amp;#34;http://www.baidu.com&amp;#34;&amp;gt;百度一下&amp;lt;/a&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;test1&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;test2&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;4&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;5&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;6&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;7&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;8&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;9&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;10&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;1、匹配某节点下的所有 .</description>
    </item>
    
    <item>
      <title>语义化版本</title>
      <link>/common/common-version/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (WoolfBreathe)</author>
      <guid>/common/common-version/</guid>
      <description>摘要 版本格式：主版本号.次版本号.修订号，版本号递增规则如下：
 主版本号：当你做了不兼容的 API 修改， 次版本号：当你做了向下兼容的功能性新增， 修订号：当你做了向下兼容的问题修正。  先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。
简介 在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的包越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。
在依赖高的系统中发布新版本包可能很快会成为噩梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个依赖包改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本依赖被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。
作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：X.Y.Z （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。
我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。
语义化版本控制规范（SemVer） 以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）
  使用语义化版本控制的软件必须（MUST）定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。
  标准的版本号必须（MUST）采用 X.Y.Z 的格式，其中 X、Y 和 Z 为非负的整数，且禁止（MUST NOT）在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须（MUST）以数值来递增。例如：1.9.1 -&amp;gt; 1.10.0 -&amp;gt; 1.11.0。
  标记版本号的软件发行后，禁止（MUST NOT）改变该版本软件的内容。任何修改都必须（MUST）以新版本发行。
  主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。
  1.</description>
    </item>
    
    <item>
      <title>接口自动化测试框架从设计到开发</title>
      <link>/common/common-test/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (WoolfBreathe)</author>
      <guid>/common/common-test/</guid>
      <description>入门条件   设计框架 开发框架 重构框架   接口基础  HTTP接口
 接口组成 常见接口介绍 接口工具使用 接口基础面试   接口开发   dingo   UnitTest与接口测试结合   UnitTest HTMLTestRunner 断言 Case Requests包的使用   设计 开发 测试框架   设计 工具封装 基类封装 调试错误 接口数据 回写报告 解决数据依赖 结果统计 右键服务 发送报告   接口测试辅助操作   操作数据库 操作Cookie   </description>
    </item>
    
  </channel>
</rss>